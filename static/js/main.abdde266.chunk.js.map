{"version":3,"sources":["Components/Card-List/card.component.jsx","Components/Card-List/card.list.component.jsx","Components/Card-List/searchbox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","cardContent","id","name","email","CardList","propMonsters","map","monsters","toLowerCase","includes","searchSt","key","SearchBox","placeholder","placeHolder","onChange","handleChange","myApp","state","searchString","fetch","then","response","json","webMonsters","setState","e","target","value","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uTAGaA,G,kBAAO,SAACC,GACjB,OAEA,yBAAKC,UAAU,YACX,yBAAKC,IAAI,GAAGC,IAAG,+BAA0BH,EAAMI,YAAYC,GAA5C,2BACf,4BAAKL,EAAMI,YAAYE,MACvB,6BAAMN,EAAMI,YAAYG,UCHnBC,EAAW,SAACR,GAErB,OACI,yBAAKC,UAAU,aACVD,EAAMS,aAAaC,KAAI,SAACC,GACrB,GAAIA,EAASL,KAAKM,cAAcC,SAASb,EAAMc,SAASF,eAEhD,OAAO,kBAAC,EAAD,CAAOG,IAAKJ,EAASL,KAAMF,YAAcO,SCV3DK,G,MAAY,SAAChB,GACtB,OACI,2BAAOC,UAAU,SACjBgB,YAAajB,EAAMkB,YAInBC,SAAUnB,EAAMoB,iBCiETC,E,kDA/Cb,aAAc,IAAD,8BACX,gBAEKC,MAAM,CACTX,SAAU,CACR,CAACL,KAAM,cACP,CAACA,KAAM,WACP,CAACA,KAAM,eAETiB,aAAc,IATL,E,gEAaO,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAACG,GAAe,EAAKC,SAAS,CAAClB,SAASiB,S,+BAIvC,IAAD,OACN,OAEE,yBAAK3B,UAAU,OACb,8CACF,kBAAC,EAAD,CAAWiB,YAAY,cACrBE,aAAc,SAAAU,GAAC,OAAE,EAAKD,SAAS,CAACN,aAAaO,EAAEC,OAAOC,WAWxD,kBAAC,EAAD,CAAUvB,aAAcwB,KAAKX,MAAMX,SAAUG,SAAUmB,KAAKX,MAAMC,oB,GAtCpDW,aCfAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.abdde266.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../Card-List/card.styling.css'\r\n\r\nexport const Card = (props)=>{\r\n    return (\r\n    \r\n    <div className='card-stl'>\r\n        <img alt='' src={`https://robohash.org/${props.cardContent.id}?set=set4&size=30x120`}/>\r\n        <h4>{props.cardContent.name}</h4>\r\n        <div>{props.cardContent.email}</div>\r\n    </div>\r\n    \r\n )\r\n\r\n}","import React from 'react';\r\nimport './card-list.styles.css'\r\nimport {Card} from '../Card-List/card.component'\r\n\r\n\r\n\r\nexport const CardList = (props)=>\r\n{    \r\n    return (    \r\n        <div className='card-list'>\r\n            {props.propMonsters.map((monsters)=> {\r\n                if (monsters.name.toLowerCase().includes(props.searchSt.toLowerCase()))\r\n                    {                        \r\n                        return <Card  key={monsters.name} cardContent= {monsters}/>}\r\n            })}\r\n        </div>    \r\n    )\r\n}","import React from 'react'\r\nimport '../Card-List/searchbox.style.css'\r\n\r\nexport const SearchBox = (props)=>{\r\n    return(\r\n        <input className='search'\r\n        placeholder={props.placeHolder}  \r\n        // onInput={\r\n        //     (e)=>{this.setState({searchString:e.target.value},()=>console.log(this.state.searchString))}\r\n        // }      \r\n        onChange={props.handleChange}\r\n        />\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport './Components/Card-List/card.list.component'\nimport { CardList } from './Components/Card-List/card.list.component';\nimport { SearchBox } from './Components/Card-List/searchbox.component';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn ReactJS\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nclass myApp extends Component {\n  constructor(){\n    super()\n\n    this.state={\n      monsters: [\n        {name: \"Frankstein\"},\n        {name: \"Drakula\"},\n        {name: \"Zombieeeee\"}\n      ],\n      searchString: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response=>response.json())\n    .then((webMonsters)=>{this.setState({monsters:webMonsters})})\n    \n  }\n\n  render(){\n    return (\n      \n      <div className=\"App\">\n        <h1>Beautiful Cats</h1>\n      <SearchBox placeHolder=\"Search Cats\"\n        handleChange={e=>this.setState({searchString:e.target.value}) }\n      />\n      {/* <input placeholder=\"search cats\" \n        onInput={\n        (e)=>{\n          this.setState({searchString:e.target.value},()=>console.log(this.state.searchString))\n          \n          }\n        }\n      \n      /> */}\n      <CardList propMonsters={this.state.monsters} searchSt={this.state.searchString}>\n      </CardList>    \n        \n      </div>\n      \n    );\n  \n  }\n}\n\nexport default myApp;\n\n// next time start from 30","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}